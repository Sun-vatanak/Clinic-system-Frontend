import {
  __commonJS
} from "./chunk-L6OFPWCY.js";

// node_modules/tom-select/dist/cjs/utils.js
var require_utils = __commonJS({
  "node_modules/tom-select/dist/cjs/utils.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.iterate = exports.append = exports.addSlashes = exports.getId = exports.isKeyDown = exports.addEvent = exports.preventDefault = exports.getSelection = exports.debounce_events = exports.loadDebounce = exports.timeout = exports.escape_html = exports.get_hash = exports.hash_key = void 0;
    var hash_key = (value) => {
      if (typeof value === "undefined" || value === null)
        return null;
      return (0, exports.get_hash)(value);
    };
    exports.hash_key = hash_key;
    var get_hash = (value) => {
      if (typeof value === "boolean")
        return value ? "1" : "0";
      return value + "";
    };
    exports.get_hash = get_hash;
    var escape_html = (str) => {
      return (str + "").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
    };
    exports.escape_html = escape_html;
    var timeout = (fn, timeout2) => {
      if (timeout2 > 0) {
        return window.setTimeout(fn, timeout2);
      }
      fn.call(null);
      return null;
    };
    exports.timeout = timeout;
    var loadDebounce = (fn, delay) => {
      var timeout2;
      return function(value, callback) {
        var self = this;
        if (timeout2) {
          self.loading = Math.max(self.loading - 1, 0);
          clearTimeout(timeout2);
        }
        timeout2 = setTimeout(function() {
          timeout2 = null;
          self.loadedSearches[value] = true;
          fn.call(self, value, callback);
        }, delay);
      };
    };
    exports.loadDebounce = loadDebounce;
    var debounce_events = (self, types, fn) => {
      var type;
      var trigger = self.trigger;
      var event_args = {};
      self.trigger = function() {
        var type2 = arguments[0];
        if (types.indexOf(type2) !== -1) {
          event_args[type2] = arguments;
        } else {
          return trigger.apply(self, arguments);
        }
      };
      fn.apply(self, []);
      self.trigger = trigger;
      for (type of types) {
        if (type in event_args) {
          trigger.apply(self, event_args[type]);
        }
      }
    };
    exports.debounce_events = debounce_events;
    var getSelection = (input) => {
      return {
        start: input.selectionStart || 0,
        length: (input.selectionEnd || 0) - (input.selectionStart || 0)
      };
    };
    exports.getSelection = getSelection;
    var preventDefault = (evt, stop = false) => {
      if (evt) {
        evt.preventDefault();
        if (stop) {
          evt.stopPropagation();
        }
      }
    };
    exports.preventDefault = preventDefault;
    var addEvent = (target, type, callback, options) => {
      target.addEventListener(type, callback, options);
    };
    exports.addEvent = addEvent;
    var isKeyDown = (key_name, evt) => {
      if (!evt) {
        return false;
      }
      if (!evt[key_name]) {
        return false;
      }
      var count = (evt.altKey ? 1 : 0) + (evt.ctrlKey ? 1 : 0) + (evt.shiftKey ? 1 : 0) + (evt.metaKey ? 1 : 0);
      if (count === 1) {
        return true;
      }
      return false;
    };
    exports.isKeyDown = isKeyDown;
    var getId = (el, id) => {
      const existing_id = el.getAttribute("id");
      if (existing_id) {
        return existing_id;
      }
      el.setAttribute("id", id);
      return id;
    };
    exports.getId = getId;
    var addSlashes = (str) => {
      return str.replace(/[\\"']/g, "\\$&");
    };
    exports.addSlashes = addSlashes;
    var append = (parent, node) => {
      if (node)
        parent.append(node);
    };
    exports.append = append;
    var iterate = (object, callback) => {
      if (Array.isArray(object)) {
        object.forEach(callback);
      } else {
        for (var key in object) {
          if (object.hasOwnProperty(key)) {
            callback(object[key], key);
          }
        }
      }
    };
    exports.iterate = iterate;
  }
});
export default require_utils();
//# sourceMappingURL=tom-select_dist_cjs_utils.js.map
